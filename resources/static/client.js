// Code is generated by github.com/swaggest/swac v0.1.31, DO NOT EDIT. ðŸ¤–

(function () {
    "use strict";

    /**
     * Photo Blog
     * Version: Version: dev, GoVersion: devel go1.21-b94dc384 Sat Mar 4 00:00:01 2023 +0000
     * @constructor
     * @param {string} baseURL - Base URL.
     */
    function Backend(baseURL) {
        // Trim trailing backslash.
        this.baseURL = (baseURL.charAt(baseURL.length - 1) === '/') ? baseURL.slice(0, -1) : baseURL;
        /** @type {?PrepareRequest} - Callback to prepare request before sending. */
        this.prepareRequest = null;
    }

    /**
     * @callback PrepareRequest
     * @param {XMLHttpRequest} value
     */

    /**
     * Create Album
     * Create a named album.
     * @param {UsecaseControlCreateAlbumRequest} req - request parameters.
     * @param {PhotoAlbumCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.usecaseControlCreateAlbum = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.coverImage !== 'undefined') {
            formData.append('cover_image', req.coverImage);
        }
        if (typeof req.name !== 'undefined') {
            formData.append('name', req.name);
        }
        if (typeof req.public !== 'undefined') {
            formData.append('public', req.public);
        }
        if (typeof req.title !== 'undefined') {
            formData.append('title', req.title);
        }

        x.send(formData);
    };

    /**
     * Update photo.Album
     * @param {PutAlbumRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.putAlbum = function (req, onNoContent, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album?';
        url = url.slice(0, -1);

        x.open("PUT", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.coverImage !== 'undefined') {
            formData.append('cover_image', req.coverImage);
        }
        if (typeof req.name !== 'undefined') {
            formData.append('name', req.name);
        }
        if (typeof req.public !== 'undefined') {
            formData.append('public', req.public);
        }
        if (typeof req.title !== 'undefined') {
            formData.append('title', req.title);
        }

        x.send(formData);
    };

    /**
     * Get Album Images
     * @param {GetAlbumImagesNameJsonRequest} req - request parameters.
     * @param {UsecaseGetAlbumOutputCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getAlbumImagesNameJson = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album-images/' + encodeURIComponent(req.name) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Get photo.Album
     * @param {GetAlbumHashJsonRequest} req - request parameters.
     * @param {PhotoAlbumCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getAlbumHashJson = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.hash) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Download Album
     * @param {GetAlbumNameZipRequest} req - request parameters.
     * @param {RawCallback} onOK
     */
    Backend.prototype.getAlbumNameZip = function (req, onOK) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '.zip?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Add Directory
     * Add a host-local directory of photos to an album (non-recursive).
     * @param {PostAlbumNameDirectoryRequest} req - request parameters.
     * @param {ControlAddDirOutputCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.postAlbumNameDirectory = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '/directory?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.path !== 'undefined') {
            formData.append('path', req.path);
        }

        x.send(formData);
    };

    /**
     * Upload Images
     * @param {PostAlbumNameImagesRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.postAlbumNameImages = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '/images?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.photos !== 'undefined') {
            for (var i = 0; i < req.photos.length; i++) {
                formData.append('profile', req.photos[i]);
            }
        }

        x.send(formData);
    };

    /**
     * Remove From Album
     * @param {DeleteAlbumNameHashRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.deleteAlbumNameHash = function (req, onNoContent, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '/' + encodeURIComponent(req.hash) +
        '?';
        url = url.slice(0, -1);

        x.open("DELETE", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Add To Album
     * @param {PostAlbumNameHashRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.postAlbumNameHash = function (req, onNoContent, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '/' + encodeURIComponent(req.hash) +
        '?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Get Albums
     * @param {Object} req - request parameters.
     * @param {UsecaseGetAlbumsOutputCallback} onOK
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getAlbumsJson = function (req, onOK, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/albums.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Form
     * @param {GetControlNameIdRequest} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getControlNameId = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/control/' + encodeURIComponent(req.name) +
        '/' + encodeURIComponent(req.id) +
        '?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Update photo.Exif
     * @param {PutExifRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.putExif = function (req, onNoContent, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/exif?';
        url = url.slice(0, -1);

        x.open("PUT", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Get photo.Exif
     * @param {GetExifHashJsonRequest} req - request parameters.
     * @param {PhotoExifCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getExifHashJson = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/exif/' + encodeURIComponent(req.hash) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Update photo.Gps
     * @param {PutGpsRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.putGps = function (req, onNoContent, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/gps?';
        url = url.slice(0, -1);

        x.open("PUT", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Get photo.Gps
     * @param {GetGpsHashJsonRequest} req - request parameters.
     * @param {PhotoGpsCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getGpsHashJson = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/gps/' + encodeURIComponent(req.hash) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Update photo.Image
     * @param {PutImageRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.putImage = function (req, onNoContent, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image?';
        url = url.slice(0, -1);

        x.open("PUT", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Get Image Info
     * @param {GetImageInfoHashJsonRequest} req - request parameters.
     * @param {UsecaseImageInfoCallback} onOK
     */
    Backend.prototype.getImageInfoHashJson = function (req, onOK) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image-info/' + encodeURIComponent(req.hash) +
        '.json?';
        if (req.readMeta != null) {
            url += 'read_meta=' + encodeURIComponent(req.readMeta) + '&';
        }
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Image
     * @param {GetImageHashJpgRequest} req - request parameters.
     * @param {RawCallback} onOK
     */
    Backend.prototype.getImageHashJpg = function (req, onOK) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image/' + encodeURIComponent(req.hash) +
        '.jpg?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Get photo.Image
     * @param {GetImageHashJsonRequest} req - request parameters.
     * @param {PhotoImageCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getImageHashJson = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image/' + encodeURIComponent(req.hash) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Index Album
     * @param {PostIndexNameRequest} req - request parameters.
     * @param {RawCallback} onAccepted
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.postIndexName = function (req, onAccepted, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 202:
                    if (typeof (onAccepted) === 'function') {
                        onAccepted(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/index/' + encodeURIComponent(req.name) +
        '?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.rebuildExif !== 'undefined') {
            formData.append('rebuild_exif', req.rebuildExif);
        }
        if (typeof req.rebuildGps !== 'undefined') {
            formData.append('rebuild_gps', req.rebuildGps);
        }

        x.send(formData);
    };

    /**
     * Make Pass Hash
     * @param {PostMakePassHashRequest} req - request parameters.
     * @param {RawCallback} onOK
     */
    Backend.prototype.postMakePassHash = function (req, onOK) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/make-pass-hash?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.pass !== 'undefined') {
            formData.append('pass', req.pass);
        }
        if (typeof req.salt !== 'undefined') {
            formData.append('salt', req.salt);
        }

        x.send(formData);
    };

    /**
     * Get Schema
     * @param {GetSchemaNameJsonRequest} req - request parameters.
     * @param {SchemaFormSchemaCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getSchemaNameJson = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/schema/' + encodeURIComponent(req.name) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Thumb
     * @param {GetThumbSizeHashJpgRequest} req - request parameters.
     * @param {RawCallback} onOK
     */
    Backend.prototype.getThumbSizeHashJpg = function (req, onOK) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/thumb/' + encodeURIComponent(req.size) +
        '/' + encodeURIComponent(req.hash) +
        '.jpg?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Album
     * @param {GetNameRequest} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getName = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/' + encodeURIComponent(req.name) +
        '/?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Pano
     * @param {GetNamePanoHashHtmlRequest} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getNamePanoHashHtml = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/' + encodeURIComponent(req.name) +
        '/pano-' + encodeURIComponent(req.hash) +
        '.html?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    window.Backend = Backend;
})();