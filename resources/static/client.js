// Code is generated by github.com/swaggest/swac v0.1.31, DO NOT EDIT. ðŸ¤–

(function () {
    "use strict";

    /**
     * Photo Blog
     * Version: Version: dev, GoVersion: devel go1.20-c0497d1 Fri Dec 2 23:40:37 2022 +0000
     * @constructor
     * @param {string} baseURL - Base URL.
     */
    function Backend(baseURL) {
        // Trim trailing backslash.
        this.baseURL = (baseURL.charAt(baseURL.length - 1) === '/') ? baseURL.slice(0, -1) : baseURL;
        /** @type {?PrepareRequest} - Callback to prepare request before sending. */
        this.prepareRequest = null;
    }

    /**
     * @callback PrepareRequest
     * @param {XMLHttpRequest} value
     */

    /**
     * Create Album
     * Create a named album.
     * @param {CreateAlbumRequest} req - request parameters.
     * @param {PhotoAlbumCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.createAlbum = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.name !== 'undefined') {
            formData.append('name', req.name);
        }
        if (typeof req.title !== 'undefined') {
            formData.append('title', req.title);
        }

        x.send(formData);
    };

    /**
     * Get Album
     * @param {GetAlbumNameJsonRequest} req - request parameters.
     * @param {UsecaseGetAlbumOutputCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getAlbumNameJson = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Download Album
     * @param {GetAlbumNameZipRequest} req - request parameters.
     * @param {RawCallback} onOK
     */
    Backend.prototype.getAlbumNameZip = function (req, onOK) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '.zip?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Remove From Album
     * @param {DeleteAlbumNameHashRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.deleteAlbumNameHash = function (req, onNoContent, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '/' + encodeURIComponent(req.hash) +
        '?';
        url = url.slice(0, -1);

        x.open("DELETE", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Add Directory
     * Add a directory of photos to an album (non-recursive).
     * @param {PostDirectoryRequest} req - request parameters.
     * @param {UsecaseHelloOutputCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.postDirectory = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/directory?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.albumName !== 'undefined') {
            formData.append('album_name', req.albumName);
        }
        if (typeof req.path !== 'undefined') {
            formData.append('path', req.path);
        }

        x.send(formData);
    };

    /**
     * Show Image
     * @param {GetImageHashJpgRequest} req - request parameters.
     * @param {RawCallback} onOK
     */
    Backend.prototype.getImageHashJpg = function (req, onOK) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image/' + encodeURIComponent(req.hash) +
        '.jpg?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Get Image
     * @param {GetImageHashJsonRequest} req - request parameters.
     * @param {UsecaseImageInfoCallback} onOK
     */
    Backend.prototype.getImageHashJson = function (req, onOK) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image/' + encodeURIComponent(req.hash) +
        '.json?';
        if (req.readMeta != null) {
            url += 'read_meta=' + encodeURIComponent(req.readMeta) + '&';
        }
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Index Album
     * @param {PostIndexNameRequest} req - request parameters.
     * @param {RawCallback} onAccepted
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.postIndexName = function (req, onAccepted, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 202:
                    if (typeof (onAccepted) === 'function') {
                        onAccepted(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/index/' + encodeURIComponent(req.name) +
        '?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.rebuildExif !== 'undefined') {
            formData.append('rebuild_exif', req.rebuildExif);
        }
        if (typeof req.rebuildGps !== 'undefined') {
            formData.append('rebuild_gps', req.rebuildGps);
        }

        x.send(formData);
    };

    /**
     * Show Thumb
     * @param {GetThumbSizeHashJpgRequest} req - request parameters.
     * @param {RawCallback} onOK
     */
    Backend.prototype.getThumbSizeHashJpg = function (req, onOK) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/thumb/' + encodeURIComponent(req.size) +
        '/' + encodeURIComponent(req.hash) +
        '.jpg?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Album
     * @param {GetNameRequest} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getName = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/' + encodeURIComponent(req.name) +
        '/?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    window.Backend = Backend;
})();