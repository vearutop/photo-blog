// Code is generated by github.com/swaggest/swac v0.1.35, DO NOT EDIT. ðŸ¤–

(function () {
    "use strict";

    /**
     * Photo Blog
     * Version: Version: dev, GoVersion: go1.22.1
     * @constructor
     * @param {string} baseURL - Base URL.
     */
    function Backend(baseURL) {
        // Trim trailing backslash.
        this.baseURL = (baseURL.charAt(baseURL.length - 1) === '/') ? baseURL.slice(0, -1) : baseURL;
        /** @type {?PrepareRequest} - Callback to prepare request before sending. */
        this.prepareRequest = null;
    }

    /**
     * @callback PrepareRequest
     * @param {XMLHttpRequest} value
     */

    /**
     * Show Main
     * @param {Object} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.showMain = function (req, onNoContent, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Add Album
     * @param {Object} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlAddAlbum = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/add-album.html?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Create Album
     * Create a named album.
     * @param {ControlCreateAlbumRequest} req - request parameters.
     * @param {PhotoAlbumCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlCreateAlbum = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Update photo.Album
     * @param {ControlUpdatePhotoAlbumRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlUpdatePhotoAlbum = function (req, onNoContent, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album?';
        url = url.slice(0, -1);

        x.open("PUT", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Get Album Contents
     * @param {GetAlbumContentsRequest} req - request parameters.
     * @param {UsecaseGetAlbumOutputCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getAlbumContents = function (req, onOK, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album-contents/' + encodeURIComponent(req.name) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Set Album Image Time
     * @param {ControlSetAlbumImageTimeRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlSetAlbumImageTime = function (req, onNoContent, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album-image-time?';
        url = url.slice(0, -1);

        x.open("PUT", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Get photo.Album
     * @param {ControlGetPhotoAlbumRequest} req - request parameters.
     * @param {PhotoAlbumCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlGetPhotoAlbum = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.hash) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Delete Album
     * @param {ControlDeleteAlbumRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlDeleteAlbum = function (req, onNoContent, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '?';
        url = url.slice(0, -1);

        x.open("DELETE", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Add To Album
     * @param {ControlAddToAlbumRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlAddToAlbum = function (req, onNoContent, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Download Album
     * @param {DownloadAlbumRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.downloadAlbum = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '.zip?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Add Directory
     * Add a host-local directory of photos to an album (non-recursive).
     * @param {ControlAddDirectoryRequest} req - request parameters.
     * @param {ControlAddDirOutputCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlAddDirectory = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '/directory?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.path !== 'undefined') {
            formData.append('path', req.path);
        }

        x.send(formData);
    };

    /**
     * Add Remote
     * Add a http-remote directory of photos to an album.
     * @param {ControlAddRemoteRequest} req - request parameters.
     * @param {ControlAddDirOutputType2Callback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlAddRemote = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '/url?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.url !== 'undefined') {
            formData.append('url', req.url);
        }

        x.send(formData);
    };

    /**
     * Remove From Album
     * @param {ControlRemoveFromAlbumRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlRemoveFromAlbum = function (req, onNoContent, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/album/' + encodeURIComponent(req.name) +
        '/' + encodeURIComponent(req.hash) +
        '?';
        url = url.slice(0, -1);

        x.open("DELETE", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Get Albums
     * @param {Object} req - request parameters.
     * @param {UsecaseGetAlbumsOutputCallback} onOK
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.getAlbums = function (req, onOK, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/albums.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * DB Console
     * @param {Object} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlDebugDBConsole = function (req, onNoContent, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/db.html?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Edit Album
     * @param {ControlEditAlbumRequest} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlEditAlbum = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/edit/album/' + encodeURIComponent(req.hash) +
        '.html?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Edit Image
     * @param {ControlEditImageRequest} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlEditImage = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/edit/image/' + encodeURIComponent(req.hash) +
        '.html?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Edit Admin Password
     * @param {Object} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlSettingsEditAdminPassword = function (req, onOK, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/edit/password.html?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Edit
     * @param {Object} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlSettingsEdit = function (req, onOK, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/edit/settings.html?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Update photo.Exif
     * @param {ControlUpdatePhotoExifRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlUpdatePhotoExif = function (req, onNoContent, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/exif?';
        url = url.slice(0, -1);

        x.open("PUT", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Get photo.Exif
     * @param {ControlGetPhotoExifRequest} req - request parameters.
     * @param {PhotoExifCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlGetPhotoExif = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/exif/' + encodeURIComponent(req.hash) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Serve Favicon
     * @param {Object} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.serveFavicon = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/favicon.ico?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Gather Files
     * @param {ControlGatherFilesRequest} req - request parameters.
     * @param {ControlGatherFilesOutputCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlGatherFiles = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/gather/' + encodeURIComponent(req.name) +
        '?';
        if (req.checkMissing != null) {
            url += 'check_missing=' + encodeURIComponent(req.checkMissing) + '&';
        }
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Update photo.Gps
     * @param {ControlUpdatePhotoGpsRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlUpdatePhotoGps = function (req, onNoContent, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/gps?';
        url = url.slice(0, -1);

        x.open("PUT", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Get photo.Gps
     * @param {ControlGetPhotoGpsRequest} req - request parameters.
     * @param {PhotoGpsCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlGetPhotoGps = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/gps/' + encodeURIComponent(req.hash) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Index
     * @param {Object} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.helpIndex = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/help/?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Serve File
     * @param {HelpServeFileRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.helpServeFile = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/help/' + encodeURIComponent(req.file) +
        '?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Markdown
     * @param {HelpMarkdownRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.helpMarkdown = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/help/' + encodeURIComponent(req.file) +
        '.md?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Update photo.Image
     * @param {ControlUpdatePhotoImageRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlUpdatePhotoImage = function (req, onNoContent, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image?';
        url = url.slice(0, -1);

        x.open("PUT", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Get Image Info
     * @param {GetImageInfoRequest} req - request parameters.
     * @param {UsecaseImageInfoCallback} onOK
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.getImageInfo = function (req, onOK, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image-info/' + encodeURIComponent(req.hash) +
        '.json?';
        if (req.readMeta != null) {
            url += 'read_meta=' + encodeURIComponent(req.readMeta) + '&';
        }
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Image
     * @param {ShowImage2Request} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.showImage2 = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image/' + encodeURIComponent(req.hash) +
        '.avif?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Image
     * @param {ShowImageRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.showImage = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image/' + encodeURIComponent(req.hash) +
        '.jpg?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Get photo.Image
     * @param {ControlGetPhotoImageRequest} req - request parameters.
     * @param {PhotoImageCallback} onOK
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlGetPhotoImage = function (req, onOK, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/image/' + encodeURIComponent(req.hash) +
        '.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Index Album
     * @param {ControlIndexAlbumRequest} req - request parameters.
     * @param {RawCallback} onAccepted
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onUnauthorized
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.controlIndexAlbum = function (req, onAccepted, onBadRequest, onUnauthorized, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 202:
                    if (typeof (onAccepted) === 'function') {
                        onAccepted(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/index/' + encodeURIComponent(req.name) +
        '?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        var formData = new FormData();
        if (typeof req.rebuildExif !== 'undefined') {
            formData.append('rebuild_exif', req.rebuildExif);
        }
        if (typeof req.rebuildGps !== 'undefined') {
            formData.append('rebuild_gps', req.rebuildGps);
        }

        x.send(formData);
    };

    /**
     * Get JSONForm Schema
     * @param {SwaggestJsonformGoRepositoryGetSchemaRequest} req - request parameters.
     * @param {JsonformGoFormSchemaCallback} onOK
     * @param {RestErrResponseCallback} onNotFound
     */
    Backend.prototype.swaggestJsonformGoRepositoryGetSchema = function (req, onOK, onNotFound) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 404:
                    if (typeof (onNotFound) === 'function') {
                        onNotFound(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/json-form/' + encodeURIComponent(req.name) +
        '-schema.json?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Login
     * @param {Object} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlLogin = function (req, onOK, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/login?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Map Tile
     * @param {MapTileRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.mapTile = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/map-tile/' + encodeURIComponent(req.r) +
        '/' + encodeURIComponent(req.z) +
        '/' + encodeURIComponent(req.x) +
        '/' + encodeURIComponent(req.y) +
        '.png?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Add Message
     * @param {AddMessageRequest} req - request parameters.
     * @param {CommentMessageCallback} onOK
     */
    Backend.prototype.addMessage = function (req, onOK) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/message?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Approve Message
     * @param {ControlApproveMessageRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlApproveMessage = function (req, onNoContent, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/message/approve?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * OG
     * @param {OG4Request} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.oG4 = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/og.html?';
        if (req.targetUrl != null) {
            url += 'target_url=' + encodeURIComponent(req.targetUrl) + '&';
        }
        url = url.slice(0, -1);

        x.open("DELETE", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * OG
     * @param {OGRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.oG = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/og.html?';
        if (req.targetUrl != null) {
            url += 'target_url=' + encodeURIComponent(req.targetUrl) + '&';
        }
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * OG
     * @param {OG6Request} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.oG6 = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/og.html?';
        if (req.targetUrl != null) {
            url += 'target_url=' + encodeURIComponent(req.targetUrl) + '&';
        }
        url = url.slice(0, -1);

        x.open("HEAD", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * OG
     * @param {OG5Request} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.oG5 = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/og.html?';
        if (req.targetUrl != null) {
            url += 'target_url=' + encodeURIComponent(req.targetUrl) + '&';
        }
        url = url.slice(0, -1);

        x.open("OPTIONS", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * OG
     * @param {OG7Request} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.oG7 = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/og.html?';
        if (req.targetUrl != null) {
            url += 'target_url=' + encodeURIComponent(req.targetUrl) + '&';
        }
        url = url.slice(0, -1);

        x.open("PATCH", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * OG
     * @param {OG3Request} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.oG3 = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/og.html?';
        if (req.targetUrl != null) {
            url += 'target_url=' + encodeURIComponent(req.targetUrl) + '&';
        }
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * OG
     * @param {OG2Request} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.oG2 = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/og.html?';
        if (req.targetUrl != null) {
            url += 'target_url=' + encodeURIComponent(req.targetUrl) + '&';
        }
        url = url.slice(0, -1);

        x.open("PUT", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * OG
     * @param {OG8Request} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.oG8 = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/og.html?';
        if (req.targetUrl != null) {
            url += 'target_url=' + encodeURIComponent(req.targetUrl) + '&';
        }
        url = url.slice(0, -1);

        x.open("TRACE", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Download Images Poi Gpx
     * @param {DownloadImagesPoiGpxRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.downloadImagesPoiGpx = function (req, onNoContent, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/poi/photos-' + encodeURIComponent(req.name) +
        '.gpx?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * DB Query
     * @param {ControlDebugDBQueryRequest} req - request parameters.
     * @param {ArrayObjectStringCallback} onOK
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlDebugDBQuery = function (req, onOK, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(JSON.parse(x.responseText));
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/query-db?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * DB Query CSV
     * @param {ControlDebugDBQueryCSVRequest} req - request parameters.
     * @param {RawCallback} onOK
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlDebugDBQueryCSV = function (req, onOK, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 200:
                    if (typeof (onOK) === 'function') {
                        onOK(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/query-db.csv?';
        if (req.statement != null) {
            url += 'statement=' + encodeURIComponent(req.statement) + '&';
        }
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Search Images
     * @param {SearchImagesRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.searchImages = function (req, onNoContent, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/search/?';
        if (req.q != null) {
            url += 'q=' + encodeURIComponent(req.q) + '&';
        }
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Set Appearance
     * @param {ControlSettingsSetAppearanceRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlSettingsSetAppearance = function (req, onNoContent, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/settings/appearance.json?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Set External API
     * @param {ControlSettingsSetExternalAPIRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlSettingsSetExternalAPI = function (req, onNoContent, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/settings/external_api.json?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Set Maps
     * @param {ControlSettingsSetMapsRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlSettingsSetMaps = function (req, onNoContent, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/settings/maps.json?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Set Password
     * @param {ControlSettingsSetPasswordRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlSettingsSetPassword = function (req, onNoContent, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/settings/password.json?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Set Privacy
     * @param {ControlSettingsSetPrivacyRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlSettingsSetPrivacy = function (req, onNoContent, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/settings/privacy.json?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Set Storage
     * @param {ControlSettingsSetStorageRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlSettingsSetStorage = function (req, onNoContent, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/settings/storage.json?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Set Visitors
     * @param {ControlSettingsSetVisitorsRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onUnauthorized
     */
    Backend.prototype.controlSettingsSetVisitors = function (req, onNoContent, onUnauthorized) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 401:
                    if (typeof (onUnauthorized) === 'function') {
                        onUnauthorized(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/settings/visitors.json?';
        url = url.slice(0, -1);

        x.open("POST", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }
        if (typeof req.body !== 'undefined') {
            x.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            x.send(JSON.stringify(req.body));
            return;
        }

        x.send();
    };

    /**
     * Serve Site File
     * @param {ServeSiteFileRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.serveSiteFile = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/site/' + encodeURIComponent(req.file) +
        '?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Collect Stats
     * @param {CollectStatsRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.collectStats = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/stats?';
        if (req.v != null) {
            url += 'v=' + encodeURIComponent(req.v) + '&';
        }
        if (req.sw != null) {
            url += 'sw=' + encodeURIComponent(req.sw) + '&';
        }
        if (req.sh != null) {
            url += 'sh=' + encodeURIComponent(req.sh) + '&';
        }
        if (req.px != null) {
            url += 'px=' + encodeURIComponent(req.px) + '&';
        }
        if (req.main != null) {
            url += 'main=' + encodeURIComponent(req.main) + '&';
        }
        if (req.album != null) {
            url += 'album=' + encodeURIComponent(req.album) + '&';
        }
        if (req.thumb != null) {
            url += 'thumb=' + encodeURIComponent(JSON.stringify(req.thumb)) + '&';
        }
        if (req.img != null) {
            url += 'img=' + encodeURIComponent(req.img) + '&';
        }
        if (req.w != null) {
            url += 'w=' + encodeURIComponent(req.w) + '&';
        }
        if (req.h != null) {
            url += 'h=' + encodeURIComponent(req.h) + '&';
        }
        if (req.mw != null) {
            url += 'mw=' + encodeURIComponent(req.mw) + '&';
        }
        if (req.mh != null) {
            url += 'mh=' + encodeURIComponent(req.mh) + '&';
        }
        if (req.time != null) {
            url += 'time=' + encodeURIComponent(req.time) + '&';
        }
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Thumb
     * @param {ShowThumbRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.showThumb = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/thumb/' + encodeURIComponent(req.size) +
        '/' + encodeURIComponent(req.hash) +
        '.jpg?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Download Gpx
     * @param {DownloadGpxRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     */
    Backend.prototype.downloadGpx = function (req, onNoContent) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/track/' + encodeURIComponent(req.hash) +
        '.gpx?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Album
     * @param {ShowAlbumRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.showAlbum = function (req, onNoContent, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/' + encodeURIComponent(req.name) +
        '/?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Pano
     * @param {ShowPanoRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.showPano = function (req, onNoContent, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/' + encodeURIComponent(req.name) +
        '/pano-' + encodeURIComponent(req.hash) +
        '.html?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    /**
     * Show Album At Image
     * @param {ShowAlbumAtImageRequest} req - request parameters.
     * @param {RawCallback} onNoContent
     * @param {RestErrResponseCallback} onBadRequest
     * @param {RestErrResponseCallback} onInternalServerError
     */
    Backend.prototype.showAlbumAtImage = function (req, onNoContent, onBadRequest, onInternalServerError) {
        var x = new XMLHttpRequest();
        x.onreadystatechange = function () {
            if (x.readyState !== XMLHttpRequest.DONE) {
                return;
            }

            switch (x.status) {
                case 204:
                    if (typeof (onNoContent) === 'function') {
                        onNoContent(x);
                    }
                    break;
                case 400:
                    if (typeof (onBadRequest) === 'function') {
                        onBadRequest(JSON.parse(x.responseText));
                    }
                    break;
                case 500:
                    if (typeof (onInternalServerError) === 'function') {
                        onInternalServerError(JSON.parse(x.responseText));
                    }
                    break;
                default:
                    throw {err: 'unexpected response', data: x};
            }
        };

        var url = this.baseURL + '/' + encodeURIComponent(req.name) +
        '/photo-' + encodeURIComponent(req.hash) +
        '.html?';
        url = url.slice(0, -1);

        x.open("GET", url, true);
        if (typeof (this.prepareRequest) === 'function') {
            this.prepareRequest(x);
        }

        x.send();
    };

    window.Backend = Backend;
})();